name: ROS 2 CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:

jobs:
  simulate:
    runs-on: ubuntu-22.04
    outputs:
      result: ${{ steps.run_sim.outputs.result }}
    strategy:
      matrix:
        scenario: [demo1, demo2, arena, maze, dynamic, multibot]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup ROS 2 Humble
        uses: ros-tooling/setup-ros@v0.7
        with:
          required-ros-distributions: humble

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y --no-install-recommends \
            python3-colcon-common-extensions \
            python3-pip python3-rosdep \
            ros-humble-ros-base \
            ros-humble-vision-msgs \
            ros-humble-ament-cmake \
            python3-matplotlib || sudo apt -f install -y

          sudo snap install webots --classic


      - name: Install Python deps
        run: |
          pip3 install --no-cache-dir --upgrade \
              "numpy<2.0" "scipy<1.25" \
              pandas scikit-learn joblib matplotlib tensorflow keras




      - name: Build workspace
        run: |
          source /opt/ros/humble/setup.bash
          cd ros2_ws
          colcon build


      - name: Run simulation with assertions
        id: run_sim
        run: |
          docker run --rm -it \
          -v "$PWD:/mnt" \
          -w /mnt/ \
          ros2_ci:latest  \
          bash -c "
            apt update && apt install -y \
            python3-pip python3-colcon-common-extensions \
            wget curl git lsb-release gnupg2 locales \
            libgl1 libglu1-mesa xvfb libxcb-cursor0 \
            libx11-xcb1 libxcb-xinerama0 libxkbcommon-x11-0 \
            libqt5gui5 libqt5widgets5 libqt5core5a libqt5x11extras5 \
            software-properties-common &&
            cd /mnt/ros2_ws &&
            rm -rf build install log
            source /opt/ros/humble/setup.bash
            colcon build
            source install/setup.bash &&
            cd .. &&
                export QT_QPA_PLATFORM=offscreen
            xvfb-run -a webots --stdout --batch --no-rendering "ros2_ws/src/sim_demo/worlds/${sc}.wbt" > webots_output.log 2>&1 &
            WEBOTS_PID=$!

            sleep 2  # Allow Webots to initialize

            (
              set +eu
              source /opt/ros/humble/setup.bash
              source ros2_ws/install/setup.bash

              # Launch metrics_collector in background
              SCENARIO=${sc} SIM_DURATION=${DURATION} LOG_INTERVAL=${INTERVAL} \
                ros2 run ros2_observability metrics_collector &
              COLLECTOR_PID=$!

              SECONDS=0
              while kill -0 $COLLECTOR_PID 2>/dev/null; do
                sleep 2
                if [[ "$SECONDS" -gt 95 ]]; then
                  echo "⏱️ Timeout hit for $sc [$i/$REPEAT]"
                  # Force kill Webots after timeout or normal completion
                  kill -TERM $WEBOTS_PID 2>/dev/null || true
                  sleep 2
                  kill -KILL $WEBOTS_PID 2>/dev/null || true
                  wait $WEBOTS_PID 2>/dev/null || true

                  # Clean stray Webots/Xvfb processes just in case
                  pkill -f webots 2>/dev/null || true
                  pkill -f Xvfb 2>/dev/null || true

                  kill -TERM $COLLECTOR_PID
                  wait $COLLECTOR_PID || true
                  break
                fi
              done

              wait $COLLECTOR_PID
              COLLECTOR_STATUS=$?

              if [[ $COLLECTOR_STATUS -ne 0 && $COLLECTOR_STATUS -ne 143 ]]; then
                echo "❌ metrics_collector failed with code $COLLECTOR_STATUS for $sc [$i/$REPEAT]"
              fi

            )
            echo "[CI] Simulation complete"
            RESULT_FILE=assertion_result_${{ matrix.scenario }}.txt
            if [[ -f "$RESULT_FILE" ]]; then
              RESULT=$(cat "$RESULT_FILE")
              echo "Assertion Result: $RESULT"
              echo "result=$RESULT" >> $GITHUB_OUTPUT
              if [[ "$RESULT" == "FAIL" ]]; then
                echo "::error Assertion failed during simulation."
                
              fi
            else
              echo "::error assertion_result.txt not found."
              
            fi"

      - name: Upload simulation metrics
        uses: actions/upload-artifact@v4
        with:
          name: ros_metrics_${{ matrix.scenario }}
          path: ros_metrics_${{ matrix.scenario }}.csv

      - name: Upload assertion result
        uses: actions/upload-artifact@v4
        with:
          name: assertion_result_${{ matrix.scenario }}
          path: assertion_result_${{ matrix.scenario }}.txt

      - name: Upload simulation log
        uses: actions/upload-artifact@v4
        with:
          name: simulation_log_${{ matrix.scenario }}
          path: simulation_log_${{ matrix.scenario }}.csv

      - name: Run AI anomaly detection for all models
        run: |
          export SCENARIO=${{ matrix.scenario }}
          for model in iforest ae cnn_lstm; do
            export AI_MODEL=$model
            echo " Running detection: $model on $SCENARIO"
            python3 flag_anomalies.py
          done
          
      - name: Compare detectors & pick best
        run: |
          export SCENARIO=${{ matrix.scenario }}
          python3 ci/compare_models.py
          cat best_model_${{ matrix.scenario }}.txt
          # surface in job summary
          echo "### ${SCENARIO}: $(cat best_model_${{ matrix.scenario }}.txt)" >> $GITHUB_STEP_SUMMARY

      - name: Upload best-model artifact
        uses: actions/upload-artifact@v4
        with:
          name: best_model_${{ matrix.scenario }}
          path: |
            best_model_${{ matrix.scenario }}.txt
            best_model_${{ matrix.scenario }}.md

      - name: Upload AI anomaly results per model
        run: |
          for model in iforest ae cnn_lstm; do
            name="ai_anomaly_result_${model}_${{ matrix.scenario }}"
            mkdir -p "$name"
            mv anomaly_result_${model}_${{ matrix.scenario }}.txt "$name/"
            mv anomaly_plot_${model}_${{ matrix.scenario }}.png "$name/"
            mv anomaly_result_log_${model}_${{ matrix.scenario }}.csv "$name/"
            
            echo "Prepared folder: $name"
          done

      - name: Upload anomaly artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ai_anomaly_results_${{ matrix.scenario }}
          path: |
            ai_anomaly_result_iforest_${{ matrix.scenario }}
            ai_anomaly_result_ae_${{ matrix.scenario }}
            ai_anomaly_result_cnn_lstm_${{ matrix.scenario }}



      - name: Generate Evaluation Summary
        run: |
          export SCENARIO=${{ matrix.scenario }}
          python3 summarize_simulations.py

      - name: Upload Evaluation Summary
        uses: actions/upload-artifact@v4
        with:
          name: evaluation_summary_${{ matrix.scenario }}
          path: evaluation_summary_${{ matrix.scenario }}.txt

      - name: Upload evaluation log
        uses: actions/upload-artifact@v4
        with:
          name: evaluation_log_${{ matrix.scenario }}
          path: evaluation_log_${{ matrix.scenario }}.csv

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_KEY_B64" | base64 -d > ~/.ssh/gha_key
          chmod 600 ~/.ssh/gha_key
          ssh-keyscan "$VM_HOST" >> ~/.ssh/known_hosts
        env:
          SSH_KEY_B64: ${{ secrets.SSH_KEY_B64 }}
          VM_HOST: 34.142.118.63
      

      - name: Save input metrics used for AI
        run: |
          mkdir -p dashboard_artifacts
          cp ros_metrics_${{ matrix.scenario }}.csv \
            dashboard_artifacts/ros_metrics_input_${{ matrix.scenario }}.csv

      - name: Validate Anomaly Detection Output
        run: |
          python3 validate_model.py
      
      - name: Upload to Dashboard VM
        if: always()
        run: |
          mkdir -p all_uploads
          find ai_anomaly_result_* -type f -exec cp {} all_uploads/ \;
          cp evaluation_summary_*.txt all_uploads/ 2>/dev/null || true
          cp best_model_*.md all_uploads/ 2>/dev/null || true
          cp simulation_log_*.csv all_uploads/ 2>/dev/null || true
          cp anomaly_result_log_*_*.csv all_uploads/ 2>/dev/null || true
          cp anomaly_plot_*_*.png all_uploads/ 2>/dev/null || true
          cp dashboard_artifacts/ros_metrics_input_*.csv all_uploads/ 2>/dev/null || true

          echo "📤 Uploading files to dashboard server..."
          scp -i ~/.ssh/gha_key all_uploads/* $VM_USER@$VM_HOST:~/ROS2_CICD/dashboard_artifacts/
        env:
          VM_USER: ec24136
          VM_HOST: 34.142.118.63

  # docker:
  #   needs: simulate
  #   if: needs.simulate.outputs.result == 'PASS'
  #   runs-on: ubuntu-22.04
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     # ── main robot image ─────────────────────────────
  #     - name: Build & push runtime image
  #       run: |
  #         IMG=docker.io/${{ secrets.DOCKERHUB_USERNAME }}/ros2_cicd:latest
  #         docker build -t "$IMG" .
  #         docker push "$IMG"

  #     # ──  dashboard image ───────────────────────────
  #     - name: Build & push dashboard image
  #       run: |
  #         IMG=docker.io/${{ secrets.DOCKERHUB_USERNAME }}/ros2_cicd:dash
  #         docker build -f Dockerfile --target dashboard -t "$IMG" .
  #         docker push "$IMG"