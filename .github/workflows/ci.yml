name: ROS 2 CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:

jobs:
  simulate:
    runs-on: ubuntu-22.04
    outputs:
      result: ${{ steps.run_sim.outputs.result }}
    strategy:
      matrix:
        scenario: [demo1, demo2]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup ROS 2 Humble
        uses: ros-tooling/setup-ros@v0.7
        with:
          required-ros-distributions: humble

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y --no-install-recommends \
            python3-colcon-common-extensions \
            python3-pip python3-rosdep \
            ros-humble-ros-base \
            ros-humble-vision-msgs \
            ros-humble-ament-cmake \
            python3-matplotlib || sudo apt -f install -y

          sudo snap install webots --classic

      - name: Use Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python deps
        run: |
          pip3 install --no-cache-dir --upgrade \
              "numpy<2.0" "scipy<1.25" \
              pandas scikit-learn joblib matplotlib \
              "tensorflow==2.15.*"




      - name: Build workspace
        run: |
          source /opt/ros/humble/setup.bash
          cd ros2_ws
          colcon build


      - name: Run simulation with assertions
        id: run_sim
        run: |
          source /opt/ros/humble/setup.bash
          source ros2_ws/install/setup.bash
          echo "[CI] Launching simulation..."
          export SCENARIO=${{ matrix.scenario }}
          timeout 3m ros2 launch sim_demo webots_sim.launch.py duration:=3m log_interval:=1.0 scenario:=$SCENARIO || [[ $? == 124 ]]
          echo "[CI] Simulation complete"
          RESULT_FILE=assertion_result_${{ matrix.scenario }}.txt
          if [[ -f "$RESULT_FILE" ]]; then
            RESULT=$(cat "$RESULT_FILE")
            echo "Assertion Result: $RESULT"
            echo "result=$RESULT" >> $GITHUB_OUTPUT
            if [[ "$RESULT" == "FAIL" ]]; then
              echo "::error Assertion failed during simulation."
              exit 1
            fi
          else
            echo "::error assertion_result.txt not found."
            exit 1
          fi

      - name: Upload simulation metrics
        uses: actions/upload-artifact@v4
        with:
          name: ros_metrics_${{ matrix.scenario }}
          path: ros_metrics_${{ matrix.scenario }}.csv

      - name: Upload assertion result
        uses: actions/upload-artifact@v4
        with:
          name: assertion_result_${{ matrix.scenario }}
          path: assertion_result_${{ matrix.scenario }}.txt

      - name: Upload simulation log
        uses: actions/upload-artifact@v4
        with:
          name: simulation_log_${{ matrix.scenario }}
          path: simulation_log_${{ matrix.scenario }}.csv

      - name: Run AI anomaly detection for all models
        run: |
          export SCENARIO=${{ matrix.scenario }}
          for model in iforest ae cnn_lstm; do
            export AI_MODEL=$model
            echo "â–¶ Running detection: $model on $SCENARIO"
            python3 flag_anomalies.py
          done

      - name: Upload AI anomaly results per model
        run: |
          for model in iforest ae cnn_lstm; do
            name="ai_anomaly_result_${model}_${{ matrix.scenario }}"
            mkdir -p "$name"
            mv anomaly_result_${{ matrix.scenario }}.txt "$name/"
            mv anomaly_plot_${{ matrix.scenario }}.png "$name/"
            mv anomaly_result_log_${{ matrix.scenario }}.csv "$name/"
            echo "Prepared folder: $name"
          done

      - name: Upload anomaly artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ai_anomaly_results_${{ matrix.scenario }}
          path: |
            ai_anomaly_result_iforest_${{ matrix.scenario }}
            ai_anomaly_result_ae_${{ matrix.scenario }}
            ai_anomaly_result_cnnlstm_${{ matrix.scenario }}



      - name: Generate Evaluation Summary
        run: |
          export SCENARIO=${{ matrix.scenario }}
          python3 summarize_simulations.py

      - name: Upload Evaluation Summary
        uses: actions/upload-artifact@v4
        with:
          name: evaluation_summary_${{ matrix.scenario }}
          path: evaluation_summary_${{ matrix.scenario }}.txt

      - name: Upload evaluation log
        uses: actions/upload-artifact@v4
        with:
          name: evaluation_log_${{ matrix.scenario }}
          path: evaluation_log_${{ matrix.scenario }}.csv



  docker:
    needs: simulate
    if: needs.simulate.outputs.result == 'PASS'
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          IMAGE_NAME=docker.io/${{ secrets.DOCKERHUB_USERNAME }}/ros2_cicd:latest
          docker build -t "$IMAGE_NAME" .
          docker push "$IMAGE_NAME"